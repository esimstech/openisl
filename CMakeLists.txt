cmake_minimum_required(VERSION "3.12.0")
project("openisl")

get_property(isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
if(isMultiConfig)
    set(CMAKE_CONFIGURATION_TYPES "Release" CACHE STRING "" FORCE)
else()
    if(NOT CMAKE_BUILD_TYPE)
        set(CMAKE_BUILD_TYPE Release CACHE STRING "" FORCE)
    endif()
    set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Release")
endif()

set(CMAKE_INSTALL_PREFIX "${CMAKE_CURRENT_SOURCE_DIR}/install" CACHE STRING "" FORCE)

find_package(Boost 1.84.0 REQUIRED)
if(Boost_FOUND)
    include_directories(${Boost_INCLUDE_DIRS})
endif()

if(MSVC)
    if(CMAKE_CL_64)
        set(PLATFORM_DIRECTORY "x64")
    else()
        set(PLATFORM_DIRECTORY "x86")
    endif()
else()
    if(CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(PLATFORM_DIRECTORY "x64")
    else()
        set(PLATFORM_DIRECTORY "x86")
    endif()
endif()

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

if(MSVC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /GS-")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /GL")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Gy")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W1")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /O2")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Oi")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zc:wchar_t")
    add_compile_definitions(UNICODE)
    add_compile_definitions(_UNICODE)
    add_compile_definitions(WIN32)
    if(CMAKE_CL_64)
        add_compile_definitions(WIN64)
    endif()
    
    set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} /LTCG")
else()
    set(CMAKE_THREAD_LIBS_INIT "-lpthread")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
    set(CMAKE_HAVE_THREADS_LIBRARY 1)
    set(CMAKE_USE_WIN32_THREADS_INIT 0)
    set(CMAKE_USE_PTHREADS_INIT 1)
    set(THREADS_PREFER_PTHREAD_FLAG ON)
endif()

set(OPENISL_JAVA_API "Build the OpenISL Java API" CACHE BOOL "FALSE")
set(OPENISL_PYTHON_API "Build the OpenISL Python API" CACHE BOOL "FALSE")
set(OPENISL_FMI "Build the OpenISL FMI connector" CACHE BOOL "FALSE")
set(OPENISL_LUA "Build the OpenISL LUA connector" CACHE BOOL "FALSE")
set(OPENISL_MODELICA "Build the OpenISL Modelica connector" CACHE BOOL "FALSE")
set(OPENISL_OMNETPP "Build the OpenISL OMNet++ connector" CACHE BOOL "FALSE")

add_subdirectory("code")
